class MyHashMap {
private:
    struct Node {
        int key;
        int value;
        Node* next;
        Node(int k, int v) : key(k), value(v), next(nullptr) {}
    };
    
    vector<Node*> buckets; 
    const int size = 10000; 

    int hash(int key) {
        return key % size;
    }
    
public:
    MyHashMap() {
        buckets = vector<Node*>(size, nullptr);
    }
    
    void put(int key, int value) {
        int index = hash(key);
       
        Node* curr = buckets[index];
        while (curr != nullptr) {
            if (curr->key == key) {
                curr->value = value; 
                return;
            }
            curr = curr->next;
        }
        
        Node* newNode = new Node(key, value);
        newNode->next = buckets[index];
        buckets[index] = newNode;
    }
    
    int get(int key) {
        int index = hash(key);
        
        Node* curr = buckets[index];
        while (curr != nullptr) {
            if (curr->key == key) {
                return curr->value;
            }
            curr = curr->next;
        }
        return -1;
    }
    
    void remove(int key) {
        int index = hash(key);
        
        Node* curr = buckets[index];
        Node* prev = nullptr;
        
        while (curr != nullptr) {
            if (curr->key == key) {
                if (prev == nullptr) {
                    buckets[index] = curr->next; 
                } else {
                    prev->next = curr->next; 
                }
                delete curr; 
                return;
            }
            prev = curr;
            curr = curr->next;
        }
    }
};
