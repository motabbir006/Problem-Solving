#include <vector>

using namespace std;

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        int m = obstacleGrid[0].size();

        vector<vector<long long>> dp(n, vector<long long>(m, 0));

        // Base case: initialize the last row and column
        dp[n - 1][m - 1] = obstacleGrid[n - 1][m - 1] == 0 ? 1 : 0;

        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--) {
                if (obstacleGrid[i][j] == 0) {
                    if (i + 1 < n)
                        dp[i][j] += dp[i + 1][j]; // Move downwards
                    if (j + 1 < m)
                        dp[i][j] += dp[i][j + 1]; // Move rightwards
                }
            }
        }

        return dp[0][0];
    }
};
