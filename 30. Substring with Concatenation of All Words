class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> result;
        if (s.empty() || words.empty()) return result;

        int wordLength = words[0].size();
        int totalLength = wordLength * words.size();

        unordered_map<string, int> wordFreq;
        for (const string& word : words)
            wordFreq[word]++;

        for (int i = 0; i < wordLength; ++i) {
            int left = i, count = 0;
            unordered_map<string, int> seen;
            for (int j = i; j <= s.size() - wordLength && j + wordLength <= s.size(); j += wordLength) {
                string word = s.substr(j, wordLength);
                if (wordFreq.find(word) != wordFreq.end()) {
                    seen[word]++;
                    if (seen[word] <= wordFreq[word])
                        count++;
                    else {
                        while (seen[word] > wordFreq[word]) {
                            string leftWord = s.substr(left, wordLength);
                            seen[leftWord]--;
                            if (seen[leftWord] < wordFreq[leftWord])
                                count--;
                            left += wordLength;
                        }
                    }
                    if (count == words.size())
                        result.push_back(left);
                } else {
                    seen.clear();
                    count = 0;
                    left = j + wordLength;
                }
            }
        }

        return result;
    }
};
